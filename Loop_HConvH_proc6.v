// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_HConvH_proc6 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        height_dout,
        height_empty_n,
        height_read,
        width_dout,
        width_empty_n,
        width_read,
        src_V_TDATA,
        src_V_TVALID,
        src_V_TREADY,
        hconv_V_din,
        hconv_V_full_n,
        hconv_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] height_dout;
input   height_empty_n;
output   height_read;
input  [31:0] width_dout;
input   width_empty_n;
output   width_read;
input  [31:0] src_V_TDATA;
input   src_V_TVALID;
output   src_V_TREADY;
output  [31:0] hconv_V_din;
input   hconv_V_full_n;
output   hconv_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg height_read;
reg width_read;
reg src_V_TREADY;
reg hconv_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    height_blk_n;
reg    width_blk_n;
reg    src_V_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln139_fu_216_p2;
reg    hconv_V_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] icmp_ln149_reg_543;
reg   [63:0] indvar_flatten_reg_141;
reg   [10:0] row_0_i_i_reg_152;
reg   [31:0] width_read_reg_509;
reg    ap_block_state1;
wire   [63:0] bound_fu_171_p2;
reg   [63:0] bound_reg_514;
reg    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [63:0] add_ln139_fu_221_p2;
wire   [31:0] add_ln147_1_fu_367_p2;
reg   [31:0] add_ln147_1_reg_528;
wire   [31:0] add_ln147_3_fu_379_p2;
reg   [31:0] add_ln147_3_reg_533;
wire   [31:0] add_ln147_10_fu_415_p2;
reg   [31:0] add_ln147_10_reg_538;
wire   [0:0] icmp_ln149_fu_421_p2;
wire   [10:0] row_fu_432_p2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg   [31:0] hwin_1_1_i_fu_76;
reg   [31:0] hwin_1_fu_80;
reg   [31:0] hwin_2_fu_84;
reg   [31:0] hwin_3_fu_88;
reg   [31:0] hwin_4_fu_92;
reg   [31:0] hwin_5_fu_96;
reg   [31:0] hwin_6_fu_100;
reg   [31:0] hwin_7_fu_104;
reg   [31:0] hwin_8_fu_108;
reg   [31:0] hwin_9_fu_112;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] bound_fu_171_p0;
wire   [31:0] bound_fu_171_p1;
wire   [31:0] zext_ln140_fu_207_p1;
wire   [0:0] icmp_ln140_fu_211_p2;
wire  signed [31:0] mul_ln147_fu_295_p1;
wire  signed [31:0] mul_ln147_1_fu_301_p1;
wire  signed [31:0] mul_ln147_2_fu_307_p1;
wire  signed [31:0] mul_ln147_3_fu_313_p1;
wire  signed [31:0] mul_ln147_4_fu_319_p1;
wire  signed [31:0] mul_ln147_5_fu_325_p1;
wire  signed [31:0] mul_ln147_6_fu_331_p1;
wire  signed [31:0] mul_ln147_7_fu_337_p1;
wire  signed [31:0] mul_ln147_8_fu_343_p1;
wire   [31:0] shl_ln147_2_fu_349_p2;
wire   [31:0] shl_ln147_fu_283_p2;
wire   [31:0] add_ln147_fu_361_p2;
wire   [31:0] shl_ln147_3_fu_355_p2;
wire   [31:0] mul_ln147_fu_295_p2;
wire   [31:0] mul_ln147_1_fu_301_p2;
wire   [31:0] add_ln147_2_fu_373_p2;
wire   [31:0] shl_ln147_1_fu_289_p2;
wire   [31:0] mul_ln147_3_fu_313_p2;
wire   [31:0] mul_ln147_4_fu_319_p2;
wire   [31:0] add_ln147_5_fu_385_p2;
wire   [31:0] mul_ln147_2_fu_307_p2;
wire   [31:0] mul_ln147_5_fu_325_p2;
wire   [31:0] mul_ln147_6_fu_331_p2;
wire   [31:0] mul_ln147_7_fu_337_p2;
wire   [31:0] mul_ln147_8_fu_343_p2;
wire   [31:0] add_ln147_8_fu_403_p2;
wire   [31:0] add_ln147_7_fu_397_p2;
wire   [31:0] add_ln147_9_fu_409_p2;
wire   [31:0] add_ln147_6_fu_391_p2;
wire   [10:0] select_ln140_fu_275_p3;
wire   [31:0] add_ln147_4_fu_438_p2;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_src_V_U_apdone_blk;
wire   [31:0] src_V_TDATA_int;
wire    src_V_TVALID_int;
reg    src_V_TREADY_int;
wire    regslice_both_src_V_U_ack_in;
wire   [63:0] bound_fu_171_p00;
wire   [63:0] bound_fu_171_p10;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

regslice_both #(
    .DataWidth( 32 ))
regslice_both_src_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(src_V_TDATA),
    .vld_in(src_V_TVALID),
    .ack_in(regslice_both_src_V_U_ack_in),
    .data_out(src_V_TDATA_int),
    .vld_out(src_V_TVALID_int),
    .ack_out(src_V_TREADY_int),
    .apdone_blk(regslice_both_src_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((real_start == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln139_fu_216_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_141 <= add_ln139_fu_221_p2;
    end else if ((~((real_start == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_141 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln139_fu_216_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        row_0_i_i_reg_152 <= row_fu_432_p2;
    end else if ((~((real_start == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        row_0_i_i_reg_152 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln139_fu_216_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln147_10_reg_538 <= add_ln147_10_fu_415_p2;
        add_ln147_1_reg_528[31 : 2] <= add_ln147_1_fu_367_p2[31 : 2];
        add_ln147_3_reg_533 <= add_ln147_3_fu_379_p2;
        icmp_ln149_reg_543 <= icmp_ln149_fu_421_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((real_start == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        bound_reg_514 <= bound_fu_171_p2;
        width_read_reg_509 <= width_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        hwin_1_1_i_fu_76 <= hwin_1_fu_80;
        hwin_1_fu_80 <= hwin_2_fu_84;
        hwin_2_fu_84 <= hwin_3_fu_88;
        hwin_3_fu_88 <= hwin_4_fu_92;
        hwin_4_fu_92 <= hwin_5_fu_96;
        hwin_5_fu_96 <= hwin_6_fu_100;
        hwin_6_fu_100 <= hwin_7_fu_104;
        hwin_7_fu_104 <= hwin_8_fu_108;
        hwin_8_fu_108 <= hwin_9_fu_112;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln139_fu_216_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        hwin_9_fu_112 <= src_V_TDATA_int;
    end
end

always @ (*) begin
    if ((icmp_ln139_fu_216_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln149_reg_543 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        hconv_V_blk_n = hconv_V_full_n;
    end else begin
        hconv_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln149_reg_543 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        hconv_V_write = 1'b1;
    end else begin
        hconv_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        height_blk_n = height_empty_n;
    end else begin
        height_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        height_read = 1'b1;
    end else begin
        height_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((icmp_ln139_fu_216_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_V_TDATA_blk_n = src_V_TVALID_int;
    end else begin
        src_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((src_V_TVALID == 1'b1) & (regslice_both_src_V_U_ack_in == 1'b1))) begin
        src_V_TREADY = 1'b1;
    end else begin
        src_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln139_fu_216_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        src_V_TREADY_int = 1'b1;
    end else begin
        src_V_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        width_blk_n = width_empty_n;
    end else begin
        width_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        width_read = 1'b1;
    end else begin
        width_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln139_fu_216_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln139_fu_216_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln139_fu_221_p2 = (indvar_flatten_reg_141 + 64'd1);

assign add_ln147_10_fu_415_p2 = (add_ln147_9_fu_409_p2 + add_ln147_6_fu_391_p2);

assign add_ln147_1_fu_367_p2 = (add_ln147_fu_361_p2 + shl_ln147_3_fu_355_p2);

assign add_ln147_2_fu_373_p2 = (mul_ln147_fu_295_p2 + mul_ln147_1_fu_301_p2);

assign add_ln147_3_fu_379_p2 = (add_ln147_2_fu_373_p2 + shl_ln147_1_fu_289_p2);

assign add_ln147_4_fu_438_p2 = (add_ln147_3_reg_533 + add_ln147_1_reg_528);

assign add_ln147_5_fu_385_p2 = (mul_ln147_3_fu_313_p2 + mul_ln147_4_fu_319_p2);

assign add_ln147_6_fu_391_p2 = (add_ln147_5_fu_385_p2 + mul_ln147_2_fu_307_p2);

assign add_ln147_7_fu_397_p2 = (mul_ln147_5_fu_325_p2 + mul_ln147_6_fu_331_p2);

assign add_ln147_8_fu_403_p2 = (mul_ln147_7_fu_337_p2 + mul_ln147_8_fu_343_p2);

assign add_ln147_9_fu_409_p2 = (add_ln147_8_fu_403_p2 + add_ln147_7_fu_397_p2);

assign add_ln147_fu_361_p2 = (shl_ln147_2_fu_349_p2 + shl_ln147_fu_283_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln149_reg_543 == 1'd1) & (hconv_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((icmp_ln139_fu_216_p2 == 1'd0) & (src_V_TVALID_int == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln149_reg_543 == 1'd1) & (hconv_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((icmp_ln139_fu_216_p2 == 1'd0) & (src_V_TVALID_int == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln149_reg_543 == 1'd1) & (hconv_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((icmp_ln139_fu_216_p2 == 1'd0) & (src_V_TVALID_int == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((icmp_ln139_fu_216_p2 == 1'd0) & (src_V_TVALID_int == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln149_reg_543 == 1'd1) & (hconv_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign bound_fu_171_p0 = bound_fu_171_p00;

assign bound_fu_171_p00 = width_dout;

assign bound_fu_171_p1 = bound_fu_171_p10;

assign bound_fu_171_p10 = height_dout;

assign bound_fu_171_p2 = (bound_fu_171_p0 * bound_fu_171_p1);

assign hconv_V_din = (add_ln147_10_reg_538 + add_ln147_4_fu_438_p2);

assign icmp_ln139_fu_216_p2 = ((indvar_flatten_reg_141 == bound_reg_514) ? 1'b1 : 1'b0);

assign icmp_ln140_fu_211_p2 = (($signed(zext_ln140_fu_207_p1) < $signed(width_read_reg_509)) ? 1'b1 : 1'b0);

assign icmp_ln149_fu_421_p2 = ((select_ln140_fu_275_p3 > 11'd9) ? 1'b1 : 1'b0);

assign mul_ln147_1_fu_301_p1 = hwin_2_fu_84;

assign mul_ln147_1_fu_301_p2 = ($signed({{1'b0}, {32'd266}}) * $signed(mul_ln147_1_fu_301_p1));

assign mul_ln147_2_fu_307_p1 = hwin_3_fu_88;

assign mul_ln147_2_fu_307_p2 = ($signed({{1'b0}, {32'd498}}) * $signed(mul_ln147_2_fu_307_p1));

assign mul_ln147_3_fu_313_p1 = hwin_4_fu_92;

assign mul_ln147_3_fu_313_p2 = ($signed({{1'b0}, {32'd724}}) * $signed(mul_ln147_3_fu_313_p1));

assign mul_ln147_4_fu_319_p1 = hwin_5_fu_96;

assign mul_ln147_4_fu_319_p2 = ($signed({{1'b0}, {32'd821}}) * $signed(mul_ln147_4_fu_319_p1));

assign mul_ln147_5_fu_325_p1 = hwin_6_fu_100;

assign mul_ln147_5_fu_325_p2 = ($signed({{1'b0}, {32'd724}}) * $signed(mul_ln147_5_fu_325_p1));

assign mul_ln147_6_fu_331_p1 = hwin_7_fu_104;

assign mul_ln147_6_fu_331_p2 = ($signed({{1'b0}, {32'd498}}) * $signed(mul_ln147_6_fu_331_p1));

assign mul_ln147_7_fu_337_p1 = hwin_8_fu_108;

assign mul_ln147_7_fu_337_p2 = ($signed({{1'b0}, {32'd266}}) * $signed(mul_ln147_7_fu_337_p1));

assign mul_ln147_8_fu_343_p1 = hwin_9_fu_112;

assign mul_ln147_8_fu_343_p2 = ($signed({{1'b0}, {32'd111}}) * $signed(mul_ln147_8_fu_343_p1));

assign mul_ln147_fu_295_p1 = hwin_1_fu_80;

assign mul_ln147_fu_295_p2 = ($signed({{1'b0}, {32'd111}}) * $signed(mul_ln147_fu_295_p1));

assign row_fu_432_p2 = (select_ln140_fu_275_p3 + 11'd1);

assign select_ln140_fu_275_p3 = ((icmp_ln140_fu_211_p2[0:0] === 1'b1) ? row_0_i_i_reg_152 : 11'd0);

assign shl_ln147_1_fu_289_p2 = hwin_1_1_i_fu_76 << 32'd2;

assign shl_ln147_2_fu_349_p2 = src_V_TDATA_int << 32'd5;

assign shl_ln147_3_fu_355_p2 = src_V_TDATA_int << 32'd2;

assign shl_ln147_fu_283_p2 = hwin_1_1_i_fu_76 << 32'd5;

assign start_out = real_start;

assign zext_ln140_fu_207_p1 = row_0_i_i_reg_152;

always @ (posedge ap_clk) begin
    add_ln147_1_reg_528[1:0] <= 2'b00;
end

endmodule //Loop_HConvH_proc6
