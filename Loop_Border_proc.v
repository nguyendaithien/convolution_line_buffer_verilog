// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_Border_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        width_dout,
        width_empty_n,
        width_read,
        height_dout,
        height_empty_n,
        height_read,
        dst_V_TDATA,
        dst_V_TVALID,
        dst_V_TREADY,
        vconv_xlim_loc_dout,
        vconv_xlim_loc_empty_n,
        vconv_xlim_loc_read,
        vconv_V_dout,
        vconv_V_empty_n,
        vconv_V_read
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state7 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] width_dout;
input   width_empty_n;
output   width_read;
input  [31:0] height_dout;
input   height_empty_n;
output   height_read;
output  [31:0] dst_V_TDATA;
output   dst_V_TVALID;
input   dst_V_TREADY;
input  [31:0] vconv_xlim_loc_dout;
input   vconv_xlim_loc_empty_n;
output   vconv_xlim_loc_read;
input  [31:0] vconv_V_dout;
input   vconv_V_empty_n;
output   vconv_V_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg width_read;
reg height_read;
reg vconv_xlim_loc_read;
reg vconv_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    width_blk_n;
reg    height_blk_n;
reg    dst_V_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter3;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln175_reg_501;
reg   [0:0] icmp_ln175_reg_501_pp0_iter2_reg;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] icmp_ln175_reg_501_pp0_iter3_reg;
reg    vconv_xlim_loc_blk_n;
reg    vconv_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] select_ln175_1_reg_518;
reg   [0:0] icmp_ln182_reg_527;
reg   [63:0] indvar_flatten_reg_149;
reg   [10:0] i6_0_i_i_i_reg_160;
reg   [10:0] j_0_i_i_i_reg_171;
reg   [31:0] width_read_reg_470;
reg    ap_block_state1;
reg   [31:0] vconv_xlim_loc_read_reg_475;
wire   [31:0] add_ln189_fu_182_p2;
reg   [31:0] add_ln189_reg_480;
wire   [31:0] add_ln196_fu_188_p2;
reg   [31:0] add_ln196_reg_485;
wire   [31:0] add_ln179_fu_194_p2;
reg   [31:0] add_ln179_reg_490;
wire   [63:0] bound_fu_208_p2;
reg   [63:0] bound_reg_496;
wire   [0:0] icmp_ln175_fu_256_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_predicate_op58_read_state3;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_state5_io;
wire    ap_block_state6_pp0_stage0_iter4;
reg    ap_block_state6_io;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln175_reg_501_pp0_iter1_reg;
wire   [63:0] add_ln175_fu_261_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [10:0] select_ln175_fu_277_p3;
reg   [10:0] select_ln175_reg_510;
reg   [10:0] select_ln175_reg_510_pp0_iter1_reg;
wire   [0:0] select_ln175_1_fu_314_p3;
reg   [0:0] select_ln175_1_reg_518_pp0_iter1_reg;
wire   [10:0] select_ln175_2_fu_326_p3;
wire   [0:0] icmp_ln182_fu_334_p2;
wire   [0:0] icmp_ln189_fu_339_p2;
reg   [0:0] icmp_ln189_reg_531;
reg   [0:0] icmp_ln189_reg_531_pp0_iter1_reg;
wire   [0:0] icmp_ln196_fu_344_p2;
reg   [0:0] icmp_ln196_reg_536;
reg   [0:0] icmp_ln196_reg_536_pp0_iter1_reg;
reg   [0:0] icmp_ln196_reg_536_pp0_iter2_reg;
wire   [10:0] j_fu_349_p2;
wire   [0:0] icmp_ln194_fu_403_p2;
reg   [0:0] icmp_ln194_reg_546;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
wire   [10:0] borderbuf_address0;
reg    borderbuf_ce0;
reg    borderbuf_we0;
wire   [10:0] borderbuf_address1;
reg    borderbuf_ce1;
wire   [31:0] borderbuf_q1;
wire   [63:0] zext_ln184_fu_355_p1;
wire   [63:0] zext_ln199_fu_413_p1;
reg   [31:0] r_edge_pix_fu_78;
reg   [31:0] pix_out_fu_82;
wire   [31:0] l_edge_pix_fu_386_p3;
reg   [31:0] pix_out_1_fu_86;
wire   [31:0] select_ln186_fu_378_p3;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] bound_fu_208_p0;
wire   [31:0] bound_fu_208_p1;
wire   [31:0] zext_ln175_1_fu_214_p1;
wire   [0:0] icmp_ln179_2_fu_230_p2;
wire   [0:0] icmp_ln179_1_fu_224_p2;
wire   [0:0] icmp_ln179_fu_218_p2;
wire   [0:0] and_ln179_fu_235_p2;
wire   [31:0] zext_ln176_fu_247_p1;
wire   [10:0] add_ln175_1_fu_267_p2;
wire   [0:0] icmp_ln176_fu_251_p2;
wire   [31:0] zext_ln175_fu_273_p1;
wire   [0:0] icmp_ln179_5_fu_297_p2;
wire   [0:0] icmp_ln179_4_fu_291_p2;
wire   [0:0] icmp_ln179_3_fu_285_p2;
wire   [0:0] and_ln179_1_fu_302_p2;
wire   [0:0] or_ln179_fu_241_p2;
wire   [0:0] or_ln179_1_fu_308_p2;
wire   [31:0] zext_ln175_2_fu_322_p1;
wire   [0:0] icmp_ln186_fu_373_p2;
wire   [10:0] add_ln199_fu_408_p2;
wire   [0:0] xor_ln194_fu_424_p2;
wire   [0:0] and_ln196_fu_429_p2;
wire   [31:0] pix_out_8_fu_434_p3;
wire    ap_CS_fsm_state7;
wire    regslice_both_dst_V_U_apdone_blk;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [31:0] dst_V_TDATA_int;
reg    dst_V_TVALID_int;
wire    dst_V_TREADY_int;
wire    regslice_both_dst_V_U_vld_out;
wire   [63:0] bound_fu_208_p00;
wire   [63:0] bound_fu_208_p10;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

Loop_Border_proc_lbW #(
    .DataWidth( 32 ),
    .AddressRange( 1910 ),
    .AddressWidth( 11 ))
borderbuf_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(borderbuf_address0),
    .ce0(borderbuf_ce0),
    .we0(borderbuf_we0),
    .d0(vconv_V_dout),
    .address1(borderbuf_address1),
    .ce1(borderbuf_ce1),
    .q1(borderbuf_q1)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_dst_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(dst_V_TDATA_int),
    .vld_in(dst_V_TVALID_int),
    .ack_in(dst_V_TREADY_int),
    .data_out(dst_V_TDATA),
    .vld_out(regslice_both_dst_V_U_vld_out),
    .ack_out(dst_V_TREADY),
    .apdone_blk(regslice_both_dst_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((regslice_both_dst_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (vconv_xlim_loc_empty_n == 1'b0) | (height_empty_n == 1'b0) | (width_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if ((~((ap_start == 1'b0) | (vconv_xlim_loc_empty_n == 1'b0) | (height_empty_n == 1'b0) | (width_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln175_fu_256_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i6_0_i_i_i_reg_160 <= select_ln175_2_fu_326_p3;
    end else if ((~((ap_start == 1'b0) | (vconv_xlim_loc_empty_n == 1'b0) | (height_empty_n == 1'b0) | (width_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i6_0_i_i_i_reg_160 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln175_fu_256_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_149 <= add_ln175_fu_261_p2;
    end else if ((~((ap_start == 1'b0) | (vconv_xlim_loc_empty_n == 1'b0) | (height_empty_n == 1'b0) | (width_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_149 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln175_fu_256_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_0_i_i_i_reg_171 <= j_fu_349_p2;
    end else if ((~((ap_start == 1'b0) | (vconv_xlim_loc_empty_n == 1'b0) | (height_empty_n == 1'b0) | (width_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        j_0_i_i_i_reg_171 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (vconv_xlim_loc_empty_n == 1'b0) | (height_empty_n == 1'b0) | (width_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln179_reg_490 <= add_ln179_fu_194_p2;
        add_ln189_reg_480 <= add_ln189_fu_182_p2;
        add_ln196_reg_485 <= add_ln196_fu_188_p2;
        bound_reg_496 <= bound_fu_208_p2;
        vconv_xlim_loc_read_reg_475 <= vconv_xlim_loc_dout;
        width_read_reg_470 <= width_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln175_reg_501 <= icmp_ln175_fu_256_p2;
        icmp_ln175_reg_501_pp0_iter1_reg <= icmp_ln175_reg_501;
        icmp_ln189_reg_531_pp0_iter1_reg <= icmp_ln189_reg_531;
        icmp_ln196_reg_536_pp0_iter1_reg <= icmp_ln196_reg_536;
        select_ln175_1_reg_518_pp0_iter1_reg <= select_ln175_1_reg_518;
        select_ln175_reg_510_pp0_iter1_reg <= select_ln175_reg_510;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln175_reg_501_pp0_iter2_reg <= icmp_ln175_reg_501_pp0_iter1_reg;
        icmp_ln175_reg_501_pp0_iter3_reg <= icmp_ln175_reg_501_pp0_iter2_reg;
        icmp_ln196_reg_536_pp0_iter2_reg <= icmp_ln196_reg_536_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln175_1_fu_314_p3 == 1'd1) & (icmp_ln175_fu_256_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln182_reg_527 <= icmp_ln182_fu_334_p2;
        icmp_ln189_reg_531 <= icmp_ln189_fu_339_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln175_reg_501_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln194_reg_546 <= icmp_ln194_fu_403_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln175_fu_256_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln196_reg_536 <= icmp_ln196_fu_344_p2;
        select_ln175_1_reg_518 <= select_ln175_1_fu_314_p3;
        select_ln175_reg_510 <= select_ln175_fu_277_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln175_1_reg_518_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        pix_out_1_fu_86 <= select_ln186_fu_378_p3;
        pix_out_fu_82 <= l_edge_pix_fu_386_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln182_reg_527 == 1'd1) & (select_ln175_1_reg_518 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        r_edge_pix_fu_78 <= vconv_V_dout;
    end
end

always @ (*) begin
    if ((icmp_ln175_fu_256_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_dst_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_dst_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        borderbuf_ce0 = 1'b1;
    end else begin
        borderbuf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        borderbuf_ce1 = 1'b1;
    end else begin
        borderbuf_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln182_reg_527 == 1'd1) & (select_ln175_1_reg_518 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        borderbuf_we0 = 1'b1;
    end else begin
        borderbuf_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln175_reg_501_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((icmp_ln175_reg_501_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        dst_V_TDATA_blk_n = dst_V_TREADY_int;
    end else begin
        dst_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln175_reg_501_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dst_V_TVALID_int = 1'b1;
    end else begin
        dst_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        height_blk_n = height_empty_n;
    end else begin
        height_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (vconv_xlim_loc_empty_n == 1'b0) | (height_empty_n == 1'b0) | (width_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        height_read = 1'b1;
    end else begin
        height_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln182_reg_527 == 1'd1) & (select_ln175_1_reg_518 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vconv_V_blk_n = vconv_V_empty_n;
    end else begin
        vconv_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op58_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        vconv_V_read = 1'b1;
    end else begin
        vconv_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        vconv_xlim_loc_blk_n = vconv_xlim_loc_empty_n;
    end else begin
        vconv_xlim_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (vconv_xlim_loc_empty_n == 1'b0) | (height_empty_n == 1'b0) | (width_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        vconv_xlim_loc_read = 1'b1;
    end else begin
        vconv_xlim_loc_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        width_blk_n = width_empty_n;
    end else begin
        width_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (vconv_xlim_loc_empty_n == 1'b0) | (height_empty_n == 1'b0) | (width_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        width_read = 1'b1;
    end else begin
        width_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (vconv_xlim_loc_empty_n == 1'b0) | (height_empty_n == 1'b0) | (width_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln175_fu_256_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((icmp_ln175_fu_256_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((regslice_both_dst_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln175_1_fu_267_p2 = (i6_0_i_i_i_reg_160 + 11'd1);

assign add_ln175_fu_261_p2 = (indvar_flatten_reg_149 + 64'd1);

assign add_ln179_fu_194_p2 = ($signed(height_dout) + $signed(32'd4294967291));

assign add_ln189_fu_182_p2 = ($signed(width_dout) + $signed(32'd4294967285));

assign add_ln196_fu_188_p2 = ($signed(width_dout) + $signed(32'd4294967290));

assign add_ln199_fu_408_p2 = ($signed(select_ln175_reg_510_pp0_iter1_reg) + $signed(11'd2043));

assign and_ln179_1_fu_302_p2 = (icmp_ln179_5_fu_297_p2 & icmp_ln179_4_fu_291_p2);

assign and_ln179_fu_235_p2 = (icmp_ln179_2_fu_230_p2 & icmp_ln179_1_fu_224_p2);

assign and_ln196_fu_429_p2 = (xor_ln194_fu_424_p2 & icmp_ln196_reg_536_pp0_iter2_reg);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((vconv_V_empty_n == 1'b0) & (ap_predicate_op58_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((vconv_V_empty_n == 1'b0) & (ap_predicate_op58_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter3 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((vconv_V_empty_n == 1'b0) & (ap_predicate_op58_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter3 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (vconv_xlim_loc_empty_n == 1'b0) | (height_empty_n == 1'b0) | (width_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((vconv_V_empty_n == 1'b0) & (ap_predicate_op58_read_state3 == 1'b1));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((icmp_ln175_reg_501_pp0_iter2_reg == 1'd0) & (dst_V_TREADY_int == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_io = ((icmp_ln175_reg_501_pp0_iter3_reg == 1'd0) & (dst_V_TREADY_int == 1'b0));
end

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op58_read_state3 = ((icmp_ln182_reg_527 == 1'd1) & (select_ln175_1_reg_518 == 1'd1));
end

assign borderbuf_address0 = zext_ln184_fu_355_p1;

assign borderbuf_address1 = zext_ln199_fu_413_p1;

assign bound_fu_208_p0 = bound_fu_208_p00;

assign bound_fu_208_p00 = width_dout;

assign bound_fu_208_p1 = bound_fu_208_p10;

assign bound_fu_208_p10 = height_dout;

assign bound_fu_208_p2 = (bound_fu_208_p0 * bound_fu_208_p1);

assign dst_V_TDATA_int = ((icmp_ln194_reg_546[0:0] === 1'b1) ? pix_out_1_fu_86 : pix_out_8_fu_434_p3);

assign dst_V_TVALID = regslice_both_dst_V_U_vld_out;

assign icmp_ln175_fu_256_p2 = ((indvar_flatten_reg_149 == bound_reg_496) ? 1'b1 : 1'b0);

assign icmp_ln176_fu_251_p2 = (($signed(zext_ln176_fu_247_p1) < $signed(width_read_reg_470)) ? 1'b1 : 1'b0);

assign icmp_ln179_1_fu_224_p2 = ((i6_0_i_i_i_reg_160 > 11'd5) ? 1'b1 : 1'b0);

assign icmp_ln179_2_fu_230_p2 = (($signed(zext_ln175_1_fu_214_p1) < $signed(add_ln179_reg_490)) ? 1'b1 : 1'b0);

assign icmp_ln179_3_fu_285_p2 = ((add_ln175_1_fu_267_p2 == 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln179_4_fu_291_p2 = ((add_ln175_1_fu_267_p2 > 11'd5) ? 1'b1 : 1'b0);

assign icmp_ln179_5_fu_297_p2 = (($signed(zext_ln175_fu_273_p1) < $signed(add_ln179_reg_490)) ? 1'b1 : 1'b0);

assign icmp_ln179_fu_218_p2 = ((i6_0_i_i_i_reg_160 == 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln182_fu_334_p2 = (($signed(zext_ln175_2_fu_322_p1) < $signed(vconv_xlim_loc_read_reg_475)) ? 1'b1 : 1'b0);

assign icmp_ln186_fu_373_p2 = ((select_ln175_reg_510_pp0_iter1_reg == 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln189_fu_339_p2 = ((zext_ln175_2_fu_322_p1 == add_ln189_reg_480) ? 1'b1 : 1'b0);

assign icmp_ln194_fu_403_p2 = ((select_ln175_reg_510_pp0_iter1_reg < 11'd6) ? 1'b1 : 1'b0);

assign icmp_ln196_fu_344_p2 = (($signed(zext_ln175_2_fu_322_p1) < $signed(add_ln196_reg_485)) ? 1'b1 : 1'b0);

assign j_fu_349_p2 = (select_ln175_fu_277_p3 + 11'd1);

assign l_edge_pix_fu_386_p3 = ((icmp_ln189_reg_531_pp0_iter1_reg[0:0] === 1'b1) ? r_edge_pix_fu_78 : pix_out_fu_82);

assign or_ln179_1_fu_308_p2 = (icmp_ln179_3_fu_285_p2 | and_ln179_1_fu_302_p2);

assign or_ln179_fu_241_p2 = (icmp_ln179_fu_218_p2 | and_ln179_fu_235_p2);

assign pix_out_8_fu_434_p3 = ((and_ln196_fu_429_p2[0:0] === 1'b1) ? borderbuf_q1 : pix_out_fu_82);

assign select_ln175_1_fu_314_p3 = ((icmp_ln176_fu_251_p2[0:0] === 1'b1) ? or_ln179_fu_241_p2 : or_ln179_1_fu_308_p2);

assign select_ln175_2_fu_326_p3 = ((icmp_ln176_fu_251_p2[0:0] === 1'b1) ? i6_0_i_i_i_reg_160 : add_ln175_1_fu_267_p2);

assign select_ln175_fu_277_p3 = ((icmp_ln176_fu_251_p2[0:0] === 1'b1) ? j_0_i_i_i_reg_171 : 11'd0);

assign select_ln186_fu_378_p3 = ((icmp_ln186_fu_373_p2[0:0] === 1'b1) ? r_edge_pix_fu_78 : pix_out_1_fu_86);

assign xor_ln194_fu_424_p2 = (icmp_ln194_reg_546 ^ 1'd1);

assign zext_ln175_1_fu_214_p1 = i6_0_i_i_i_reg_160;

assign zext_ln175_2_fu_322_p1 = select_ln175_fu_277_p3;

assign zext_ln175_fu_273_p1 = add_ln175_1_fu_267_p2;

assign zext_ln176_fu_247_p1 = j_0_i_i_i_reg_171;

assign zext_ln184_fu_355_p1 = select_ln175_reg_510;

assign zext_ln199_fu_413_p1 = add_ln199_fu_408_p2;

endmodule //Loop_Border_proc
